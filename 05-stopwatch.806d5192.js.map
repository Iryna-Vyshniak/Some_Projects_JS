{"mappings":"AAAA,MACMA,EAAUC,SAASC,cAAc,YACjCC,EAAaF,SAASC,cAAc,uBACpCE,EAAWH,SAASC,cAAc,aAClCG,EAAcJ,SAASC,cAAc,wBACrCI,EAAcL,SAASC,cAAc,wBACrCK,EAAYN,SAASC,cAAc,kBACnCM,EAAaP,SAASC,cAAc,mBACvBD,SAASC,cAAc,mBAE1C,IAAIO,EAAa,KACbC,EAAS,KACTC,EAAsB,EAC1B,MAIMC,EAAQ,KACRH,IACFI,cAAcJ,GACdA,EAAa,K,EA6BXK,EAAkBC,GACrBd,SAASC,cAAc,cAAcc,UAAYD,EAEpDf,EAAQiB,iBAAiB,SAASC,IAChCX,EAAUY,OACVP,GAAO,IAGTR,EAASa,iBAAiB,SAASC,IACjCA,EAAEE,cAAcC,UAAUC,OAAO,UACjCd,EAAWe,OAASf,EAAWW,OAASX,EAAWgB,QAC/Cf,EACFG,IArCU,MACZ,MAAMa,EAAc,IAAIC,KAAKA,KAAKC,MAAQhB,GAC1CF,EAAamB,aAAY,KACvB,MAAMC,EAAQ,IAAIH,KAASD,EAE3Bd,EAAsBkB,EACtB,MAAMC,EAAeC,KAAKC,MAAMH,EA9BV,KA+BhBI,EAAUF,KAAKC,MAAMH,EA/BL,IAaL,IAmBXK,EAAUH,KAAKC,MACnBH,EAAU,IAnBM,IAqBZM,EAAQJ,KAAKC,MACjBH,EAAU,KArBG,IAwBTO,EAAYC,OAAOJ,GAASK,SAAS,EAAG,KACxCC,EAAYF,OAAOH,GAASI,SAAS,EAAG,KACxCE,EAAUH,OAAOF,GAAOG,SAAS,EAAG,KAI1CxB,EAF0B,GAAG0B,OAAaD,OAAeH,OAAeN,IAEtC,GACjC,EAAE,EAiBHW,EAAO,IAMX,MAAMC,EAAkB3B,GACrBd,SAASC,cAAc,mBAAmBc,UAAYD,EA8BnD4B,EAAiB,KACjBjC,IACFG,cAAcH,GACdA,EAAS,K,EAUbL,EAAYY,iBAAiB,SAASC,IACpCA,EAAEE,cAAcC,UAAUC,OAAO,UACjCd,EAAWe,OAASf,EAAWW,OAASX,EAAWgB,QAC/Cd,EACFiC,IA7CU,MACZ,MAAMlB,EAAc,IAAIC,KAAKA,KAAKC,MAAQhB,GAC1CD,EAASkB,aAAY,KACnB,MAAMC,EAAQ,IAAIH,KAASD,EAE3Bd,EAAsBkB,EACtB,MAAMC,EAAeC,KAAKC,MAAMH,EA9EV,KA+EhBI,EAAUF,KAAKC,MAAMH,EA/EL,IAaL,IAmEXK,EAAUH,KAAKC,MACnBH,EAAU,IAnEM,IAqEZM,EAAQJ,KAAKC,MACjBH,EAAU,KArEG,IAuETe,EAAOb,KAAKC,MAChBH,EAAS,OAGLO,EAAYC,OAAOJ,GAASK,SAAS,EAAG,KACxCC,EAAYF,OAAOH,GAASI,SAAS,EAAG,KACxCE,EAAUH,OAAOF,GAAOG,SAAS,EAAG,KAI1CI,EAF0B,GAAGE,UAAaJ,OAAaD,OAAeH,OAAeN,IAEnD,GACjC,EAAE,EAsBHe,EAAO,IAIXvC,EAAYW,iBAAiB,SAASC,IACpCyB,GAAgB,IAGlBxC,EAAWc,iBAAiB,SAASC,IACnCX,EAAUY,OACVwB,IACAhC,EAAsB,EACtB+B,EAAgB,4BAA4B","sources":["src/app/05-stopwatch.js"],"sourcesContent":["const millisecondsInSec = 1000;\nconst stopBtn = document.querySelector('.js-stop');\nconst stopButton = document.querySelector('.js-stop__stopwatch');\nconst startBtn = document.querySelector('.js-start');\nconst startButton = document.querySelector('.js-start__stopwatch');\nconst pauseButton = document.querySelector('.js-pause__stopwatch');\nconst stopAudio = document.querySelector('.js-audio-stop');\nconst startAudio = document.querySelector('.js-audio-start');\nconst pauseAudio = document.querySelector('.js-audio-pause');\n\nlet intervalId = null;\nlet timeId = null;\nlet elapsedMilliseconds = 0;\nconst secondsInMin = 60;\nconst minutesInHour = 60;\nconst hoursInDay = 24;\n\nconst pause = () => {\n  if (intervalId) {\n    clearInterval(intervalId);\n    intervalId = null;\n  }\n};\n\nconst start = () => {\n  const initialDate = new Date(Date.now() - elapsedMilliseconds);\n  intervalId = setInterval(() => {\n    const delta = new Date() - initialDate;\n\n    elapsedMilliseconds = delta;\n    const milliseconds = Math.floor(delta % millisecondsInSec);\n    const seconds = Math.floor((delta / millisecondsInSec) % secondsInMin);\n    const minutes = Math.floor(\n      (delta / (millisecondsInSec * secondsInMin)) % minutesInHour\n    );\n    const hours = Math.floor(\n      (delta / (millisecondsInSec * secondsInMin * minutesInHour)) % hoursInDay\n    );\n\n    const UISeconds = String(seconds).padStart(2, '0');\n    const UIMinutes = String(minutes).padStart(2, '0');\n    const UIHours = String(hours).padStart(2, '0');\n\n    const stopwatcherFormat = `${UIHours} : ${UIMinutes} : ${UISeconds} : ${milliseconds}`;\n\n    renderStopWatch(stopwatcherFormat);\n  }, 0);\n};\n\nconst renderStopWatch = str =>\n  (document.querySelector('.stopwatch').innerText = str);\n\nstopBtn.addEventListener('click', e => {\n  stopAudio.play();\n  pause();\n});\n\nstartBtn.addEventListener('click', e => {\n  e.currentTarget.classList.toggle('paused');\n  startAudio.paused ? startAudio.play() : startAudio.pause();\n  if (intervalId) {\n    pause();\n  } else {\n    start();\n  }\n});\n\n// ------- next variant with 3 buttons ------------------------\n\nconst renderStopwatch = str =>\n  (document.querySelector('.stopwatch-next').innerText = str);\n\nconst begin = () => {\n  const initialDate = new Date(Date.now() - elapsedMilliseconds);\n  timeId = setInterval(() => {\n    const delta = new Date() - initialDate;\n\n    elapsedMilliseconds = delta;\n    const milliseconds = Math.floor(delta % millisecondsInSec);\n    const seconds = Math.floor((delta / millisecondsInSec) % secondsInMin);\n    const minutes = Math.floor(\n      (delta / (millisecondsInSec * secondsInMin)) % minutesInHour\n    );\n    const hours = Math.floor(\n      (delta / (millisecondsInSec * secondsInMin * minutesInHour)) % hoursInDay\n    );\n    const days = Math.floor(\n      delta / (millisecondsInSec * secondsInMin * minutesInHour * hoursInDay)\n    );\n\n    const UISeconds = String(seconds).padStart(2, '0');\n    const UIMinutes = String(minutes).padStart(2, '0');\n    const UIHours = String(hours).padStart(2, '0');\n\n    const stopwatcherFormat = `${days} days ${UIHours} : ${UIMinutes} : ${UISeconds} : ${milliseconds}`;\n\n    renderStopwatch(stopwatcherFormat);\n  }, 0);\n};\n\nconst pauseStopwatch = () => {\n  if (timeId) {\n    clearInterval(timeId);\n    timeId = null;\n  }\n};\n\nconst interrupt = () => {\n  pauseStopwatch();\n  elapsedMilliseconds = 0;\n  renderStopwatch('0 days 00:00:00:000');\n};\n\nstartButton.addEventListener('click', e => {\n  e.currentTarget.classList.toggle('paused');\n  startAudio.paused ? startAudio.play() : startAudio.pause();\n  if (timeId) {\n    pauseStopwatch();\n  } else {\n    begin();\n  }\n});\n\npauseButton.addEventListener('click', e => {\n  pauseStopwatch();\n});\n\nstopButton.addEventListener('click', e => {\n  stopAudio.play();\n  pauseStopwatch();\n  elapsedMilliseconds = 0;\n  renderStopwatch('0 days 00 : 00 : 00 : 000');\n});\n"],"names":["$e741cc9c7fc0a09d$var$stopBtn","document","querySelector","$e741cc9c7fc0a09d$var$stopButton","$e741cc9c7fc0a09d$var$startBtn","$e741cc9c7fc0a09d$var$startButton","$e741cc9c7fc0a09d$var$pauseButton","$e741cc9c7fc0a09d$var$stopAudio","$e741cc9c7fc0a09d$var$startAudio","$e741cc9c7fc0a09d$var$intervalId","$e741cc9c7fc0a09d$var$timeId","$e741cc9c7fc0a09d$var$elapsedMilliseconds","$e741cc9c7fc0a09d$var$pause","clearInterval","$e741cc9c7fc0a09d$var$renderStopWatch","str","innerText","addEventListener","e","play","currentTarget","classList","toggle","paused","pause","initialDate","Date","now","setInterval","delta","milliseconds","Math","floor","seconds","minutes","hours","UISeconds","String","padStart","UIMinutes","UIHours","$e741cc9c7fc0a09d$var$start","$e741cc9c7fc0a09d$var$renderStopwatch","$e741cc9c7fc0a09d$var$pauseStopwatch","days","$e741cc9c7fc0a09d$var$begin"],"version":3,"file":"05-stopwatch.806d5192.js.map"}