{"mappings":"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","sources":["src/app/05-stopwatch.js"],"sourcesContent":["import moment from 'moment';\n\nconst stopBtn = document.querySelector('.js-stop');\nconst stopButton = document.querySelector('.js-stop__stopwatch');\nconst startBtn = document.querySelector('.js-start');\nconst startButton = document.querySelector('.js-start__stopwatch');\nconst pauseButton = document.querySelector('.js-pause__stopwatch');\nconst stopAudio = document.querySelector('.js-audio-stop');\nconst startAudio = document.querySelector('.js-audio-start');\nconst pauseAudio = document.querySelector('.js-audio-pause');\nconst timeNow = document.querySelector('.js-time-now');\nconst clockface = document.querySelector('.stopwatch');\n\ntimeNow.textContent = moment().format('dddd, MMMM Do YYYY, h:mm:ss a');\n\nlet timeId = null;\nlet intervalId = null;\nlet elapsedMilliseconds = 0;\nconst millisecondsInSec = 1000;\nconst secondsInMin = 60;\nconst minutesInHour = 60;\nconst hoursInDay = 24;\n\nclass Timer {\n  constructor({ onTick }) {\n    this.isActive = false;\n    this.onTick = onTick;\n  }\n\n  init() {\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n\n    const startTime = Date.now();\n    this.isActive = true;\n    startAudio.play();\n\n    intervalId = setInterval(() => {\n      startAudio.pause();\n      const currentTime = Date.now();\n      const deltaTime = currentTime - startTime;\n      const time = this.getTimeComponents(deltaTime);\n\n      this.onTick(time);\n    }, 1000);\n  }\n\n  stop() {\n    stopAudio.play();\n    clearInterval(intervalId);\n    this.isActive = false;\n    const time = this.getTimeComponents(0);\n    this.onTick(time);\n  }\n\n  pause() {\n    if (intervalId) {\n      clearInterval(intervalId);\n      intervalId = null;\n    }\n  }\n\n  getTimeComponents(time) {\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { hours, mins, secs };\n  }\n\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nfunction updateClockface({ hours, mins, secs, milliseconds }) {\n  clockface.textContent = `${hours} : ${mins} : ${secs}`;\n}\n\nconst timer = new Timer({\n  onTick: updateClockface,\n});\n\nstartBtn.addEventListener('click', timer.start.bind(timer));\nstopBtn.addEventListener('click', timer.stop.bind(timer));\n\n// ------- next variant with 3 buttons ------------------------\n\nconst renderStopwatch = str =>\n  (document.querySelector('.stopwatch-next').innerText = str);\n\nconst begin = () => {\n  const initialDate = new Date(Date.now() - elapsedMilliseconds);\n  timeId = setInterval(() => {\n    const delta = new Date() - initialDate;\n\n    elapsedMilliseconds = delta;\n    const milliseconds = Math.floor(delta % millisecondsInSec);\n    const seconds = Math.floor((delta / millisecondsInSec) % secondsInMin);\n    const minutes = Math.floor(\n      (delta / (millisecondsInSec * secondsInMin)) % minutesInHour\n    );\n    const hours = Math.floor(\n      (delta / (millisecondsInSec * secondsInMin * minutesInHour)) % hoursInDay\n    );\n    const days = Math.floor(\n      delta / (millisecondsInSec * secondsInMin * minutesInHour * hoursInDay)\n    );\n\n    const UISeconds = String(seconds).padStart(2, '0');\n    const UIMinutes = String(minutes).padStart(2, '0');\n    const UIHours = String(hours).padStart(2, '0');\n\n    const stopwatcherFormat = `${days} days ${UIHours} : ${UIMinutes} : ${UISeconds} : ${milliseconds}`;\n\n    renderStopwatch(stopwatcherFormat);\n  }, 0);\n};\n\nconst pauseStopwatch = () => {\n  if (timeId) {\n    clearInterval(timeId);\n    timeId = null;\n  }\n};\n\nconst interrupt = () => {\n  pauseStopwatch();\n  elapsedMilliseconds = 0;\n  renderStopwatch('0 days 00:00:00:000');\n};\n\nstartButton.addEventListener('click', e => {\n  startAudio.play();\n  if (timeId) {\n    pauseStopwatch();\n  } else {\n    begin();\n  }\n});\n\npauseButton.addEventListener('click', e => {\n  pauseAudio.play();\n  if (timeId) {\n    pauseStopwatch();\n  } else {\n    begin();\n  }\n});\n\nstopButton.addEventListener('click', e => {\n  stopAudio.play();\n  pauseStopwatch();\n  elapsedMilliseconds = 0;\n  renderStopwatch('0 days 00 : 00 : 00 : 000');\n});\n"],"names":["$cxTnx","parcelRequire","$e741cc9c7fc0a09d$var$stopBtn","document","querySelector","$e741cc9c7fc0a09d$var$stopButton","$e741cc9c7fc0a09d$var$startBtn","$e741cc9c7fc0a09d$var$startButton","$e741cc9c7fc0a09d$var$pauseButton","$e741cc9c7fc0a09d$var$stopAudio","$e741cc9c7fc0a09d$var$startAudio","$e741cc9c7fc0a09d$var$pauseAudio","$e741cc9c7fc0a09d$var$timeNow","$e741cc9c7fc0a09d$var$clockface","textContent","$parcel$interopDefault","format","$e741cc9c7fc0a09d$var$timeId","$e741cc9c7fc0a09d$var$intervalId","$e741cc9c7fc0a09d$var$elapsedMilliseconds","$e741cc9c7fc0a09d$var$timer","init","time","this","getTimeComponents","onTick","start","isActive","startTime","Date","now","play","setInterval","pause","deltaTime","stop","clearInterval","pad","Math","floor","value","String","padStart","constructor","hours","mins","secs","milliseconds","addEventListener","bind","$e741cc9c7fc0a09d$var$renderStopwatch","str","innerText","$e741cc9c7fc0a09d$var$begin","initialDate","delta","seconds","minutes","days","UISeconds","UIMinutes","UIHours","$e741cc9c7fc0a09d$var$pauseStopwatch","e"],"version":3,"file":"05-stopwatch.b2203efd.js.map"}